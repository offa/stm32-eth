language: minimal

dist: focal

services:
  - docker

env:
  global:
    - DOCKER_IMG="registry.gitlab.com/offa/docker-images-ci/dist-stm32"


jobs:
    include:
    - env: COMPILER=gcc-10 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=gcc-9 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=gcc-8 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=gcc-7 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-10 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-9 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-8 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-7 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-6 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=clang-5 BUILD_OPTS="-asan -ubsan"
    - env: COMPILER=arm-none-eabi-gcc BUILD_TYPE=Debug
    - env: COMPILER=arm-none-eabi-gcc BUILD_TYPE=Release
    - env: COMPILER=arm-none-eabi-gcc BUILD_TYPE=MinSizeRel
    - env: COMPILER=arm-none-eabi-gcc BUILD_TYPE=MinSizeRel LTO_ENABLED=ON

before_install:
  - docker pull ${DOCKER_IMG}/${COMPILER}:latest

script:
  - if [[ "${COMPILER}" == "arm-none-eabi-gcc" ]]; then ARGS="-e CC=arm-none-abi-gcc -e CXX=arm-none-eabi-g++ -e BUILD_TYPE -e LTO_ENABLED"; fi
  - docker run --cap-add SYS_PTRACE -v ${PWD}:/mnt ${ARGS} -it ${DOCKER_IMG}/${COMPILER} /bin/bash -c "cd /mnt; script/ci_build.sh ${BUILD_OPTS}"
